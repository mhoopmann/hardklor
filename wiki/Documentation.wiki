#summary Command line and parameters for Hardklor

= Command Line =

Hardklör is operated from the command line:

*Usage:* hardklor _<config file>_


_<config file>_ is an ASCII text configuration file containing the parameters to use and the list of files to analyze. Detailed parameter descriptions are found below. An example configuration file can be found [SampleConfig here].


= Parameters =

|| *Parameter* || *Value* || *Recommended Range of Values* || *Description* ||
|| algorithm || Text || Version2 || Possible algorithms to choose from: *Basic*, *Version1*, and *Version2*. This parameter determines which spectral feature detection algorithm to use. Different results are possible with each algorithm, and there are pros and cons to each. The Basic algorithm performs unoptimized deconvolution and is provided for legacy purposes only. Version1 uses the optimizations developed during the version 1.0+ series. It is very accurate, but has limited sensitivity, and moderate speed improvements. Version2 uses the optimizations developed for version 2.0+. It is highly sensitive, but less accurate for very low abundance features, and performs exceptionally fast.||
|| averagine_mod || Text || 0 || Defines alternative averagine models in the analysis that incorporate additional atoms and/or isotopic enrichments. Modifications are represented as text strings. Inclusion of additional atoms in the model is done using by entering an atomic formula,such as: *PO2* or *Cl*. Inclusion of isotopic enrichment to the model is done by specifying the percent enrichment (as a decimal) followed by the atom being enriched and an index of the isotope. For example, *0.75H1* specifies 75% enrichment of the first heavy isotope of hydrogen. In other words, 75% deuterium enrichment. Two or more modifications can be combined into the same model, and separated by spaces: *B2 0.5B1* This parameter can also be listed multiple times in the configuration file to include multiple competing averagine models in a single analysis. Setting this parameter to *0* disables use of modifications in the analysis.||
|| boxcar_averaging || Integer || 0 to 7 || Boxcar averaging is a sliding window that averages _n_ adjacent spectra prior to feature detection. Averaging generally improves the signal-to-noise ratio of features in the spectra, as well as improving the shape of isotopic envelopes. However, averaging will also change the observed peak intensities. Averaging with too wide a window will increase the occurrence of overlapping features and broaden the chromatographic profiles of observed features. The number specified is the total adjacent scans to be combined, centered on the scan being analyzed. Therefore, an odd number is recommended to center the boxcar window. For example, a value of *3* would produce an average of the scan of interest, plus one scan on each side. A value of *0* disables boxcar averaging.||
|| boxcar_filter || Integer || 0 to 7 || This parameter is only functional when _boxcar_averaging_ is used. The filter will remove any peaks not seen in _n_ scans in the boxcar window. The effect is to reduce peak accumulation due to noise and reduce chromatographic broadening of peaks. Caution should be used as over-filtering can occur. The suggested number of scans to set for filtering should be equal to or less than the boxcar_averaging window size. A value of *0* disables filtering.||
|| boxcar_filter_ppm || General Number || 5.0 to 20.0 || This parameter is only functional when _boxcar_filter_ is used. The value specifies the mass tolerance in ppm for declaring a peak the same prior to filtering across all scans in the boxcar window.||
|| centroided || Integer || 0 or 1 || Indicates whether the data contain profile or centroided peaks. Set to *0* for profile peaks or *1* for centroided peaks. If the setting on this parameter does not match the data peaks, the results will be incorrect.||
|| charge_algorithm || Text || Quick || Determines the algorithm to use to predict the charge of any peak in a spectrum. Values are: *Quick*, *FFT*, *Patterson*, *Senko*, and *None*. Different algorithms produce different results and are discussed in the Hardklör manuscript. *Senko* combines the FFT and Patterson algorithms. If *None* is set, all charge states are assumed for all peaks, leaving the correct charge state to be determined by the feature-finding components of the algorithm at great computational expense. It is far more efficient to predict charge state prior to identifying features in the spectra.||
|| charge_min || Integer || 1 to 100 || Specifies the minimum charge state to allow when finding spectral features. It is best to set this value to the lowest assumed charge state to be present. If set higher than actual charge states that are present, those features will not be identified or incorrectly assigned a different charge state and mass.||
|| charge_max || Integer || 1 to 100 || Specifies the maximum charge state to allow when finding spectral features. It is best to set this value to a practical number (i.e. *do not* set it to 20 when doing a tryptic shotgun analysis). If set higher than actual charge states that are present, the algorithm will perform significantly slower without any improvement in results.||

===More parameter descriptions soon===